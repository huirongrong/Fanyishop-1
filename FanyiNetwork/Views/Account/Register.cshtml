@{
    Layout = "_Layout";
}

@section styles{

}
<div class="layout-content">
    <div class="container">
        <i-form :model="formValidate" ref="formValidate" :rules="validateRules" :label-width="80">
            <Form-item label="账号" prop="account">
                <i-input v-model="formValidate.account" placeholder="输入你的用户名, 至少6位"></i-input>
            </Form-item>
            <Form-item label="密码" prop="password">
                <i-input v-model="formValidate.password" placeholder="输入你的密码，至少6位"></i-input>
            </Form-item>
            <Form-item label="确认密码" prop="passwordCheck">
                <i-input v-model="formValidate.passwordCheck" placeholder="再次输入确认你的密码"></i-input>
            </Form-item>
            <Form-item label="部门" prop="group">
                <i-select v-model="formValidate.group" placeholder="选择你的部门">
                    <i-option v-for="item in formValidate.groups" :value="item.value" :key="item">{{ item.label }}</i-option>
                </i-select>
            </Form-item>
            <Form-item label="姓名" prop="name">
                <i-input v-model="formValidate.name" placeholder="输入你的真实姓名"></i-input>
            </Form-item>
            <Form-item label="手机" prop="mobile">
                <i-input v-model="formValidate.mobile" placeholder="输入你的真实手机号"></i-input>
            </Form-item>
            <Form-item label="QQ" prop="qq">
                <i-input v-model="formValidate.qq" placeholder="输入你的QQ号码"></i-input>
            </Form-item>
                
            <Form-item>
                <Row>
                    <i-col span="8">&nbsp;</i-col>
                    <i-col span="8" style="text-align:center;">
                        <i-button type="primary" @@click="handleSubmit('formValidate')">注册</i-button>
                        <i-button type="ghost" @@click="handleReset('formValidate')" style="margin-left: 8px">重置</i-button>
                    </i-col>
                    <i-col span="8">&nbsp;</i-col>
                </Row>
            </Form-item>
        </i-form>
    </div>
</div>
@section scripts{
<script>
    const validatePass = function (rule, value, callback) {
        if (value === '') {
            callback(new Error('请输入密码'));
        } else {
            callback();
        }
    };
    const validatePassCheck = function (rule, value, callback) {
        if (value === '') {
            callback(new Error('请再次输入密码'));
        } else if (value !== vm.$data.formValidate.password) {
            callback(new Error('两次输入密码不一致!'));
        } else {
            callback();
        }
    };

var vm = new Vue({

    el: '#app',
    data: {
        formValidate: {
            account: '',
            password: '',
            passwordCheck: '',
            name: '',
            group:'',
            groups: [
                {
                    value: "主编",
                    label: "主编"
                },
                {
                    value: "编辑部",
                    label: "编辑部"
                },
                {
                    value: "客服部",
                    label: "客服部"
                },
                {
                    value: "人事部",
                    label: "人事部"
                },
                {
                    value: "经理办",
                    label: "经理办"
                }
            ]
        },
        validateRules: {
            account: [
                { required: true, message: '用户名不能为空', trigger: 'blur' }
            ],
            name: [
                { required: true, message: '姓名不能为空', trigger: 'blur' }
            ],
            group: [
                { required: true, message: '部门不能为空', trigger: 'blur' }
            ],
            mobile: [
                { required: true, message: '手机号不能为空', trigger: 'blur' }
            ],
            qq: [
                { required: true, message: 'QQ不能为空', trigger: 'blur' }
            ],
            password: [
                { required: true, validator: validatePass, trigger: 'blur' }
            ],
            passwordCheck: [
                { required: true, validator: validatePassCheck, trigger: 'blur' }
            ]
        }
    },
    methods: {
        handleSubmit(name) {
            this.$refs[name].validate((valid) => {
                if (valid) {
                    var _this = this;
                    axios.post('/account/register', this.formValidate)
                    .then(function (response) {
                        _this.$Message.success('注册成功!');

                        setTimeout(function () {
                            window.location.href = "/home/index";
                        }, 1000);
                    })
                        .catch(function (error) {
                            if (error.response) {
                                _this.$Message.error('注册失败, ' + error.response.data);
                            }
                            else { 
                                _this.$Message.error('注册失败!');
                            }
                    });
                } else {
                    _this.$Message.error('表单验证失败!');
                }
            })
            
        },
        handleReset(name) {
            this.$refs[name].resetFields();
        }
    }
})
</script>
}
